name: Deploy Docs

on:
  push:
    branches:
      - dev
      - test
      - main

permissions:
  contents: write  # allow push via GITHUB_TOKEN

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Get full history so we can switch branches & push commits
      - name: Checkout all branches
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) Detect current branch name
      - name: Set branch variable
        id: vars
        run: |
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      # 3) Build / copy `src` into a temp folder
      - name: Stash build
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}
          TMP=./_temp_docs
          mkdir -p "$TMP/$BRANCH"
          cp -R src/* "$TMP/$BRANCH"

      # 4) Check out main
      - name: Switch to main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: true

      # 5) Clean docs/ on main (keep dev & test), or remove old branch folder
      - name: Clean old artefacts
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}

          if [ "$BRANCH" = "main" ]; then
            # remove everything under docs/ except docs/dev & docs/test
            for D in docs/*; do
              NAME=$(basename "$D")
              if [ "$NAME" != "dev" ] && [ "$NAME" != "test" ]; then
                rm -rf "docs/$NAME"
              fi
            done
          else
            rm -rf "docs/$BRANCH"
          fi

      # 6) Copy the new build back into docs/
      - name: Deploy build into docs
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}
          TMP=./_temp_docs

          if [ "$BRANCH" = "main" ]; then
            # main branch output goes into docs root
            cp -R "$TMP/main/"* docs/
          else
            # other branches get their own subfolder
            mkdir -p docs/"$BRANCH"
            cp -R "$TMP/$BRANCH/"* docs/"$BRANCH"/
          fi

      # 7) Commit & push only if there are changes
      - name: Commit & Push
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"

          git add docs

          if git diff --cached --exit-code; then
            echo "ðŸŸ¡ No changes to deploy for branch '$BRANCH'."
          else
            git commit -m "Deploy ${BRANCH} build"
            git push origin main
          fi
