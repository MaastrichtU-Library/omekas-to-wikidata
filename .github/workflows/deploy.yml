name: Deploy Docs

on:
  push:
    branches:
      - dev
      - test
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Grab full history & allow pushes
      - name: Checkout all branches
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) Extract branch name into an output
      - name: Set branch variable
        id: vars
        run: |
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      # 3) Build (or just copy) your src into a temp location
      - name: Stash build
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}
          TMP=./_temp_docs
          rm -rf "$TMP"
          mkdir -p "$TMP/$BRANCH"
          cp -R src/* "$TMP/$BRANCH"

      # 4) Switch context to main
      - name: Switch to main
        run: git switch main

      # 5) Clean old docs safely (no errors on unmatched globs)
      - name: Clean docs directory
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}
          mkdir -p docs
          shopt -s nullglob
          if [ "$BRANCH" = "main" ]; then
            for path in docs/*; do
              name=$(basename "$path")
              if [ "$name" != "dev" ] && [ "$name" != "test" ]; then
                rm -rf "docs/$name"
              fi
            done
          else
            rm -rf "docs/$BRANCH" 2>/dev/null || true
          fi

      # 6) Copy the new build into docs/
      - name: Deploy build into docs
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}
          TMP=./_temp_docs
          if [ "$BRANCH" = "main" ]; then
            cp -R "$TMP/main/"* docs/
          else
            mkdir -p docs/"$BRANCH"
            cp -R "$TMP/$BRANCH/"* docs/"$BRANCH"/
          fi

      # 7) Commit & push only when there are changes
      - name: Commit & Push
        run: |
          BRANCH=${{ steps.vars.outputs.branch }}
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add docs
          if git diff --cached --quiet; then
            echo "ðŸŸ¡ No changes to deploy for branch '$BRANCH'."
          else
            git commit -m "Deploy $BRANCH build"
            git push origin main
          fi
